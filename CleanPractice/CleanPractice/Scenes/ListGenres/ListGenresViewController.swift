//
//  ListGenresViewController.swift
//  CleanPractice
//
//  Created by Ehsan on 12/04/2020.
//  Copyright (c) 2020 Ali C. All rights reserved.
//
//  This file was generated by Ali Chegini.
//  This is a simplified version of the Clean Swift Xcode Templates so
//  one can apply clean architecture to iOS and Mac projects.
//  For more info visit: http://clean-swift.com
//

import UIKit

protocol ListGenresDisplayable: class {
    func displayGenres(with viewModel: ListGenresModels.ViewModel)
}

class ListGenresViewController: UITableViewController, ListGenresDisplayable {
    
    lazy var interactor = ListGenresInteractor(presenter: ListGenresPresenter(viewController: self))
    lazy var router = ListGenresRouter(viewController: self)
    
    var viewModel: ListGenresModels.ViewModel?
    
    let uiElements = ListGenresUIs()
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        uiElements.setupViews(in: view)
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "myCell")
        navigationItem.title = "Genres"
        
        interactor.fetchGenres(with: ListGenresModels.Request())
    }
    
    
    func displayGenres(with viewModel: ListGenresModels.ViewModel) {
        self.viewModel = viewModel
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
}


extension ListGenresViewController {
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel?.genres.genres.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "myCell")!
        cell.textLabel?.text = viewModel?.genres.genres[indexPath.row].name
        
        return cell
    }
    
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let genre = viewModel?.genres.genres[indexPath.row] else {
            return
        }
        print("did select genre", genre)
        
        router.showGenre(genre: genre)
    }
    
}

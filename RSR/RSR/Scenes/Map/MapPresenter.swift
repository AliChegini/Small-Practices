//
//  MapPresenter.swift
//  RSR
//
//  Created by Ehsan on 06/03/2020.
//  Copyright (c) 2020 Ali C. All rights reserved.
//
//  This file was generated by Ali Chegini.
//  This is a simplified version of the Clean Swift Xcode Templates so
//  one can apply clean architecture to iOS and Mac projects.
//  For more info visit: http://clean-swift.com
//

import UIKit
import CoreLocation

protocol MapPresentable {
    func presentAddress(response: MapModels.LocateTheUser.Response)
    func presentElementsForDeviceType(response: MapModels.ShowElementsForDevice.Response)
    func presentPermissionAlert(response: MapModels.AskForPermission.Response)
    func presentNetworkAlert(response: MapModels.CheckInternetConnection.Response)
}

class MapPresenter: MapPresentable {
    weak var viewController: MapDisplayable?
  
    init(viewController: MapDisplayable) {
        self.viewController = viewController
    }
    
    func presentAddress(response: MapModels.LocateTheUser.Response) {
        // determining the address using the obtained location
        let geocoder = CLGeocoder()
        geocoder.reverseGeocodeLocation(response.location) { placemark, _ in
            if let placemark = placemark {
                var stringAddress = ""
                guard let info = placemark.first else {
                    return
                }
                
                // constructing string address to show user
                if let streetName = info.thoroughfare {
                    stringAddress += "\(streetName) "
                }
                
                if let streetNumber = info.subThoroughfare {
                    stringAddress += "\(streetNumber), "
                }
                
                if let postCode = info.postalCode {
                    stringAddress += "\(postCode), "
                }
            
                if let city = info.locality {
                    stringAddress +=  "\(city)"
                }
        
                let viewModel = MapModels.LocateTheUser.ViewModel(address: stringAddress,
                                                                  coordinate: response.location.coordinate)
                self.viewController?.displayAddress(viewModel: viewModel)
            }
        }
    }
        
    func presentElementsForDeviceType(response: MapModels.ShowElementsForDevice.Response) {
        let viewModel = MapModels.ShowElementsForDevice.ViewModel(deviceType: response.deviceType)
        viewController?.displayElementsForDeviceType(viewModel: viewModel)
    }
    
    func presentPermissionAlert(response: MapModels.AskForPermission.Response) {
        let viewModel = MapModels.AskForPermission.ViewModel()
        viewController?.displayPermissionAlert(viewModel: viewModel)
    }
    
    func presentNetworkAlert(response: MapModels.CheckInternetConnection.Response) {
        let viewModel = MapModels.CheckInternetConnection.ViewModel()
        viewController?.displayNetworkAlert(viewModel: viewModel)
    }
}
